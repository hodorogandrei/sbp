{"version":3,"sources":["vendor.js"],"names":[],"mappings":"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","file":"vendor.js","sourcesContent":["/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/* Geodesy representation conversion functions                        (c) Chris Veness 2002-2016  */\n/*                                                                                   MIT Licence  */\n/* www.movable-type.co.uk/scripts/latlong.html                                                    */\n/* www.movable-type.co.uk/scripts/geodesy/docs/module-dms.html                                    */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\n'use strict';\n/* eslint no-irregular-whitespace: [2, { skipComments: true }] */\n\n\n/**\n * Latitude/longitude points may be represented as decimal degrees, or subdivided into sexagesimal\n * minutes and seconds.\n *\n * @module dms\n */\n\n\n/**\n * Functions for parsing and representing degrees / minutes / seconds.\n * @class Dms\n */\nvar Dms = {};\n\n// note Unicode Degree = U+00B0. Prime = U+2032, Double prime = U+2033\n\n\n/**\n * Parses string representing degrees/minutes/seconds into numeric degrees.\n *\n * This is very flexible on formats, allowing signed decimal degrees, or deg-min-sec optionally\n * suffixed by compass direction (NSEW). A variety of separators are accepted (eg 3° 37′ 09″W).\n * Seconds and minutes may be omitted.\n *\n * @param   {string|number} dmsStr - Degrees or deg/min/sec in variety of formats.\n * @returns {number} Degrees as decimal number.\n *\n * @example\n *     var lat = Dms.parseDMS('51° 28′ 40.12″ N');\n *     var lon = Dms.parseDMS('000° 00′ 05.31″ W');\n *     var p1 = new LatLon(lat, lon); // 51.4778°N, 000.0015°W\n */\nDms.parseDMS = function(dmsStr) {\n    // check for signed decimal degrees without NSEW, if so return it directly\n    if (typeof dmsStr == 'number' && isFinite(dmsStr)) return Number(dmsStr);\n\n    // strip off any sign or compass dir'n & split out separate d/m/s\n    var dms = String(dmsStr).trim().replace(/^-/, '').replace(/[NSEW]$/i, '').split(/[^0-9.,]+/);\n    if (dms[dms.length-1]=='') dms.splice(dms.length-1);  // from trailing symbol\n\n    if (dms == '') return NaN;\n\n    // and convert to decimal degrees...\n    var deg;\n    switch (dms.length) {\n        case 3:  // interpret 3-part result as d/m/s\n            deg = dms[0]/1 + dms[1]/60 + dms[2]/3600;\n            break;\n        case 2:  // interpret 2-part result as d/m\n            deg = dms[0]/1 + dms[1]/60;\n            break;\n        case 1:  // just d (possibly decimal) or non-separated dddmmss\n            deg = dms[0];\n            // check for fixed-width unseparated format eg 0033709W\n            //if (/[NS]/i.test(dmsStr)) deg = '0' + deg;  // - normalise N/S to 3-digit degrees\n            //if (/[0-9]{7}/.test(deg)) deg = deg.slice(0,3)/1 + deg.slice(3,5)/60 + deg.slice(5)/3600;\n            break;\n        default:\n            return NaN;\n    }\n    if (/^-|[WS]$/i.test(dmsStr.trim())) deg = -deg; // take '-', west and south as -ve\n\n    return Number(deg);\n};\n\n\n/**\n * Separator character to be used to separate degrees, minutes, seconds, and cardinal directions.\n *\n * Set to '\\u202f' (narrow no-break space) for improved formatting.\n *\n * @example\n *   var p = new LatLon(51.2, 0.33);  // 51°12′00.0″N, 000°19′48.0″E\n *   Dms.separator = '\\u202f';        // narrow no-break space\n *   var pʹ = new LatLon(51.2, 0.33); // 51° 12′ 00.0″ N, 000° 19′ 48.0″ E\n */\nDms.separator = '';\n\n\n/**\n * Converts decimal degrees to deg/min/sec format\n *  - degree, prime, double-prime symbols are added, but sign is discarded, though no compass\n *    direction is added.\n *\n * @private\n * @param   {number} deg - Degrees to be formatted as specified.\n * @param   {string} [format=dms] - Return value as 'd', 'dm', 'dms' for deg, deg+min, deg+min+sec.\n * @param   {number} [dp=0|2|4] - Number of decimal places to use – default 0 for dms, 2 for dm, 4 for d.\n * @returns {string} Degrees formatted as deg/min/secs according to specified format.\n */\nDms.toDMS = function(deg, format, dp) {\n    if (isNaN(deg)) return null;  // give up here if we can't make a number from deg\n\n    // default values\n    if (format === undefined) format = 'dms';\n    if (dp === undefined) {\n        switch (format) {\n            case 'd':    case 'deg':         dp = 4; break;\n            case 'dm':   case 'deg+min':     dp = 2; break;\n            case 'dms':  case 'deg+min+sec': dp = 0; break;\n            default:    format = 'dms'; dp = 0;  // be forgiving on invalid format\n        }\n    }\n\n    deg = Math.abs(deg);  // (unsigned result ready for appending compass dir'n)\n\n    var dms, d, m, s;\n    switch (format) {\n        default: // invalid format spec!\n        case 'd': case 'deg':\n            d = deg.toFixed(dp);    // round degrees\n            if (d<100) d = '0' + d; // pad with leading zeros\n            if (d<10) d = '0' + d;\n            dms = d + '°';\n            break;\n        case 'dm': case 'deg+min':\n            var min = (deg*60).toFixed(dp); // convert degrees to minutes & round\n            d = Math.floor(min / 60);       // get component deg/min\n            m = (min % 60).toFixed(dp);     // pad with trailing zeros\n            if (d<100) d = '0' + d;         // pad with leading zeros\n            if (d<10) d = '0' + d;\n            if (m<10) m = '0' + m;\n            dms = d + '°'+Dms.separator + m + '′';\n            break;\n        case 'dms': case 'deg+min+sec':\n            var sec = (deg*3600).toFixed(dp); // convert degrees to seconds & round\n            d = Math.floor(sec / 3600);       // get component deg/min/sec\n            m = Math.floor(sec/60) % 60;\n            s = (sec % 60).toFixed(dp);       // pad with trailing zeros\n            if (d<100) d = '0' + d;           // pad with leading zeros\n            if (d<10) d = '0' + d;\n            if (m<10) m = '0' + m;\n            if (s<10) s = '0' + s;\n            dms = d + '°'+Dms.separator + m + '′'+Dms.separator + s + '″';\n            break;\n    }\n\n    return dms;\n};\n\n\n/**\n * Converts numeric degrees to deg/min/sec latitude (2-digit degrees, suffixed with N/S).\n *\n * @param   {number} deg - Degrees to be formatted as specified.\n * @param   {string} [format=dms] - Return value as 'd', 'dm', 'dms' for deg, deg+min, deg+min+sec.\n * @param   {number} [dp=0|2|4] - Number of decimal places to use – default 0 for dms, 2 for dm, 4 for d.\n * @returns {string} Degrees formatted as deg/min/secs according to specified format.\n */\nDms.toLat = function(deg, format, dp) {\n    var lat = Dms.toDMS(deg, format, dp);\n    return lat===null ? '–' : lat.slice(1)+Dms.separator + (deg<0 ? 'S' : 'N');  // knock off initial '0' for lat!\n};\n\n\n/**\n * Convert numeric degrees to deg/min/sec longitude (3-digit degrees, suffixed with E/W)\n *\n * @param   {number} deg - Degrees to be formatted as specified.\n * @param   {string} [format=dms] - Return value as 'd', 'dm', 'dms' for deg, deg+min, deg+min+sec.\n * @param   {number} [dp=0|2|4] - Number of decimal places to use – default 0 for dms, 2 for dm, 4 for d.\n * @returns {string} Degrees formatted as deg/min/secs according to specified format.\n */\nDms.toLon = function(deg, format, dp) {\n    var lon = Dms.toDMS(deg, format, dp);\n    return lon===null ? '–' : lon+Dms.separator + (deg<0 ? 'W' : 'E');\n};\n\n\n/**\n * Converts numeric degrees to deg/min/sec as a bearing (0°..360°)\n *\n * @param   {number} deg - Degrees to be formatted as specified.\n * @param   {string} [format=dms] - Return value as 'd', 'dm', 'dms' for deg, deg+min, deg+min+sec.\n * @param   {number} [dp=0|2|4] - Number of decimal places to use – default 0 for dms, 2 for dm, 4 for d.\n * @returns {string} Degrees formatted as deg/min/secs according to specified format.\n */\nDms.toBrng = function(deg, format, dp) {\n    deg = (Number(deg)+360) % 360;  // normalise -ve values to 180°..360°\n    var brng =  Dms.toDMS(deg, format, dp);\n    return brng===null ? '–' : brng.replace('360', '0');  // just in case rounding took us up to 360°!\n};\n\n\n/**\n * Returns compass point (to given precision) for supplied bearing.\n *\n * @param   {number} bearing - Bearing in degrees from north.\n * @param   {number} [precision=3] - Precision (1:cardinal / 2:intercardinal / 3:secondary-intercardinal).\n * @returns {string} Compass point for supplied bearing.\n *\n * @example\n *   var point = Dms.compassPoint(24);    // point = 'NNE'\n *   var point = Dms.compassPoint(24, 1); // point = 'N'\n */\nDms.compassPoint = function(bearing, precision) {\n    if (precision === undefined) precision = 3;\n    // note precision = max length of compass point; it could be extended to 4 for quarter-winds\n    // (eg NEbN), but I think they are little used\n\n    bearing = ((bearing%360)+360)%360; // normalise to 0..360\n\n    var point;\n\n    switch (precision) {\n        case 1: // 4 compass points\n            switch (Math.round(bearing*4/360)%4) {\n                case 0: point = 'N'; break;\n                case 1: point = 'E'; break;\n                case 2: point = 'S'; break;\n                case 3: point = 'W'; break;\n            }\n            break;\n        case 2: // 8 compass points\n            switch (Math.round(bearing*8/360)%8) {\n                case 0: point = 'N';  break;\n                case 1: point = 'NE'; break;\n                case 2: point = 'E';  break;\n                case 3: point = 'SE'; break;\n                case 4: point = 'S';  break;\n                case 5: point = 'SW'; break;\n                case 6: point = 'W';  break;\n                case 7: point = 'NW'; break;\n            }\n            break;\n        case 3: // 16 compass points\n            switch (Math.round(bearing*16/360)%16) {\n                case  0: point = 'N';   break;\n                case  1: point = 'NNE'; break;\n                case  2: point = 'NE';  break;\n                case  3: point = 'ENE'; break;\n                case  4: point = 'E';   break;\n                case  5: point = 'ESE'; break;\n                case  6: point = 'SE';  break;\n                case  7: point = 'SSE'; break;\n                case  8: point = 'S';   break;\n                case  9: point = 'SSW'; break;\n                case 10: point = 'SW';  break;\n                case 11: point = 'WSW'; break;\n                case 12: point = 'W';   break;\n                case 13: point = 'WNW'; break;\n                case 14: point = 'NW';  break;\n                case 15: point = 'NNW'; break;\n            }\n            break;\n        default:\n            throw new RangeError('Precision must be between 1 and 3');\n    }\n\n    return point;\n};\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\n/** Polyfill String.trim for old browsers\n *  (q.v. blog.stevenlevithan.com/archives/faster-trim-javascript) */\nif (String.prototype.trim === undefined) {\n    String.prototype.trim = function() {\n        return String(this).replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n    };\n}\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\nif (typeof module != 'undefined' && module.exports) module.exports = Dms; // ≡ export default Dms\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/* Geodesy tools for an ellipsoidal earth model                       (c) Chris Veness 2005-2016  */\n/*                                                                                   MIT Licence  */\n/* www.movable-type.co.uk/scripts/latlong-convert-coords.html                                     */\n/* www.movable-type.co.uk/scripts/geodesy/docs/module-latlon-ellipsoidal.html                     */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\n'use strict';\nif (typeof module!='undefined' && module.exports) var Vector3d = require('./vector3d.js'); // ≡ import Vector3d from 'vector3d.js'\nif (typeof module!='undefined' && module.exports) var Dms = require('./dms.js');           // ≡ import Dms from 'dms.js'\n\n\n/**\n * Library of geodesy functions for operations on an ellipsoidal earth model.\n *\n * Includes ellipsoid parameters and datums for different coordinate systems, and methods for\n * converting between them and to cartesian coordinates.\n *\n * q.v. Ordnance Survey ‘A guide to coordinate systems in Great Britain’ Section 6\n * www.ordnancesurvey.co.uk/docs/support/guide-coordinate-systems-great-britain.pdf.\n *\n * @module   latlon-ellipsoidal\n * @requires dms\n */\n\n\n/**\n * Creates lat/lon (polar) point with latitude & longitude values, on a specified datum.\n *\n * @constructor\n * @param {number}       lat - Geodetic latitude in degrees.\n * @param {number}       lon - Longitude in degrees.\n * @param {LatLon.datum} [datum=WGS84] - Datum this point is defined within.\n *\n * @example\n *     var p1 = new LatLon(51.4778, -0.0016, LatLon.datum.WGS84);\n */\nfunction LatLon(lat, lon, datum) {\n    // allow instantiation without 'new'\n    if (!(this instanceof LatLon)) return new LatLon(lat, lon, datum);\n\n    if (datum === undefined) datum = LatLon.datum.WGS84;\n\n    this.lat = Number(lat);\n    this.lon = Number(lon);\n    this.datum = datum;\n}\n\n\n/**\n * Ellipsoid parameters; major axis (a), minor axis (b), and flattening (f) for each ellipsoid.\n */\nLatLon.ellipsoid = {\n    WGS84:        { a: 6378137,     b: 6356752.31425, f: 1/298.257223563 },\n    GRS80:        { a: 6378137,     b: 6356752.31414, f: 1/298.257222101 },\n    Airy1830:     { a: 6377563.396, b: 6356256.909,   f: 1/299.3249646   },\n    AiryModified: { a: 6377340.189, b: 6356034.448,   f: 1/299.3249646   },\n    Intl1924:     { a: 6378388,     b: 6356911.946,   f: 1/297           },\n    Bessel1841:   { a: 6377397.155, b: 6356078.963,   f: 1/299.152815351 },\n};\n\n/**\n * Datums; with associated ellipsoid, and Helmert transform parameters to convert from WGS 84 into\n * given datum.\n *\n * More are available from earth-info.nga.mil/GandG/coordsys/datums/NATO_DT.pdf,\n * www.fieldenmaps.info/cconv/web/cconv_params.js\n */\nLatLon.datum = {\n    /* eslint key-spacing: 0, comma-dangle: 0 */\n    WGS84: {\n        ellipsoid: LatLon.ellipsoid.WGS84,\n        transform: { tx:    0.0,    ty:    0.0,     tz:    0.0,    // m\n                     rx:    0.0,    ry:    0.0,     rz:    0.0,    // sec\n                      s:    0.0 }                                  // ppm\n    },\n    NAD83: { // (2009); functionally ≡ WGS84 - www.uvm.edu/giv/resources/WGS84_NAD83.pdf\n        ellipsoid: LatLon.ellipsoid.GRS80,\n        transform: { tx:    1.004,  ty:   -1.910,   tz:   -0.515,  // m\n                     rx:    0.0267, ry:    0.00034, rz:    0.011,  // sec\n                      s:   -0.0015 }                               // ppm\n    }, // note: if you *really* need to convert WGS84<->NAD83, you need more knowledge than this!\n    OSGB36: { // www.ordnancesurvey.co.uk/docs/support/guide-coordinate-systems-great-britain.pdf\n        ellipsoid: LatLon.ellipsoid.Airy1830,\n        transform: { tx: -446.448,  ty:  125.157,   tz: -542.060,  // m\n                     rx:   -0.1502, ry:   -0.2470,  rz:   -0.8421, // sec\n                      s:   20.4894 }                               // ppm\n    },\n    ED50: { // www.gov.uk/guidance/oil-and-gas-petroleum-operations-notices#pon-4\n        ellipsoid: LatLon.ellipsoid.Intl1924,\n        transform: { tx:   89.5,    ty:   93.8,     tz:  123.1,    // m\n                     rx:    0.0,    ry:    0.0,     rz:    0.156,  // sec\n                      s:   -1.2 }                                  // ppm\n    },\n    Irl1975: { // osi.ie/OSI/media/OSI/Content/Publications/transformations_booklet.pdf\n        ellipsoid: LatLon.ellipsoid.AiryModified,\n        transform: { tx: -482.530,  ty:  130.596,   tz: -564.557,  // m\n                     rx:   -1.042,  ry:   -0.214,   rz:   -0.631,  // sec\n                      s:   -8.150 }                                // ppm\n    }, // note: many sources have opposite sign to rotations - to be checked!\n    TokyoJapan: { // www.geocachingtoolbox.com?page=datumEllipsoidDetails\n        ellipsoid: LatLon.ellipsoid.Bessel1841,\n        transform: { tx:  148,      ty: -507,       tz: -685,      // m\n                     rx:    0,      ry:    0,       rz:    0,      // sec\n                      s:    0 }                                    // ppm\n    },\n};\n\n\n/**\n * Converts ‘this’ lat/lon coordinate to new coordinate system.\n *\n * @param   {LatLon.datum} toDatum - Datum this coordinate is to be converted to.\n * @returns {LatLon} This point converted to new datum.\n *\n * @example\n *     var pWGS84 = new LatLon(51.4778, -0.0016, LatLon.datum.WGS84);\n *     var pOSGB = pWGS84.convertDatum(LatLon.datum.OSGB36); // 51.4773°N, 000.0000°E\n */\nLatLon.prototype.convertDatum = function(toDatum) {\n    var oldLatLon = this;\n    var transform;\n\n    if (oldLatLon.datum == LatLon.datum.WGS84) {\n        // converting from WGS 84\n        transform = toDatum.transform;\n    }\n    if (toDatum == LatLon.datum.WGS84) {\n        // converting to WGS 84; use inverse transform (don't overwrite original!)\n        transform = {};\n        for (var param in oldLatLon.datum.transform) {\n            if (oldLatLon.datum.transform.hasOwnProperty(param)) {\n                transform[param] = -oldLatLon.datum.transform[param];\n            }\n        }\n    }\n    if (transform === undefined) {\n        // neither this.datum nor toDatum are WGS84: convert this to WGS84 first\n        oldLatLon = this.convertDatum(LatLon.datum.WGS84);\n        transform = toDatum.transform;\n    }\n\n    var oldCartesian = oldLatLon.toCartesian();                // convert polar to cartesian...\n    var newCartesian = oldCartesian.applyTransform(transform); // ...apply transform...\n    var newLatLon = newCartesian.toLatLonE(toDatum);           // ...and convert cartesian to polar\n\n    return newLatLon;\n};\n\n\n/**\n * Converts ‘this’ point from (geodetic) latitude/longitude coordinates to (geocentric) cartesian\n * (x/y/z) coordinates.\n *\n * @returns {Vector3d} Vector pointing to lat/lon point, with x, y, z in metres from earth centre.\n */\nLatLon.prototype.toCartesian = function() {\n    var φ = this.lat.toRadians(), λ = this.lon.toRadians();\n    var h = 0; // height above ellipsoid - not currently used\n    var a = this.datum.ellipsoid.a, f = this.datum.ellipsoid.f;\n\n    var sinφ = Math.sin(φ), cosφ = Math.cos(φ);\n    var sinλ = Math.sin(λ), cosλ = Math.cos(λ);\n\n    var eSq = 2*f - f*f;                      // 1st eccentricity squared ≡ (a²-b²)/a²\n    var ν = a / Math.sqrt(1 - eSq*sinφ*sinφ); // radius of curvature in prime vertical\n\n    var x = (ν+h) * cosφ * cosλ;\n    var y = (ν+h) * cosφ * sinλ;\n    var z = (ν*(1-eSq)+h) * sinφ;\n\n    var point = new Vector3d(x, y, z);\n\n    return point;\n};\n\n\n/**\n * Converts ‘this’ (geocentric) cartesian (x/y/z) point to (ellipsoidal geodetic) latitude/longitude\n * coordinates on specified datum.\n *\n * Uses Bowring’s (1985) formulation for μm precision in concise form.\n *\n * @param {LatLon.datum.transform} datum - Datum to use when converting point.\n */\nVector3d.prototype.toLatLonE = function(datum) {\n    var x = this.x, y = this.y, z = this.z;\n    var a = datum.ellipsoid.a, b = datum.ellipsoid.b, f = datum.ellipsoid.f;\n\n    var e2 = 2*f - f*f;   // 1st eccentricity squared ≡ (a²-b²)/a²\n    var ε2 = e2 / (1-e2); // 2nd eccentricity squared ≡ (a²-b²)/b²\n    var p = Math.sqrt(x*x + y*y); // distance from minor axis\n    var R = Math.sqrt(p*p + z*z); // polar radius\n\n    // parametric latitude (Bowring eqn 17, replacing tanβ = z·a / p·b)\n    var tanβ = (b*z)/(a*p) * (1+ε2*b/R);\n    var sinβ = tanβ / Math.sqrt(1+tanβ*tanβ);\n    var cosβ = sinβ / tanβ;\n\n    // geodetic latitude (Bowring eqn 18: tanφ = z+ε²bsin³β / p−e²cos³β)\n    var φ = isNaN(cosβ) ? 0 : Math.atan2(z + ε2*b*sinβ*sinβ*sinβ, p - e2*a*cosβ*cosβ*cosβ);\n\n    // longitude\n    var λ = Math.atan2(y, x);\n\n    // height above ellipsoid (Bowring eqn 7) [not currently used]\n    var sinφ = Math.sin(φ), cosφ = Math.cos(φ);\n    var ν = a/Math.sqrt(1-e2*sinφ*sinφ); // length of the normal terminated by the minor axis\n    var h = p*cosφ + z*sinφ - (a*a/ν);\n\n    var point = new LatLon(φ.toDegrees(), λ.toDegrees(), datum);\n\n    return point;\n};\n\n/**\n * Applies Helmert transform to ‘this’ point using transform parameters t.\n *\n * @private\n * @param {LatLon.datum.transform} t - Transform to apply to this point.\n */\nVector3d.prototype.applyTransform = function(t)   {\n    var x1 = this.x, y1 = this.y, z1 = this.z;\n\n    var tx = t.tx, ty = t.ty, tz = t.tz;\n    var rx = (t.rx/3600).toRadians(); // normalise seconds to radians\n    var ry = (t.ry/3600).toRadians(); // normalise seconds to radians\n    var rz = (t.rz/3600).toRadians(); // normalise seconds to radians\n    var s1 = t.s/1e6 + 1;             // normalise ppm to (s+1)\n\n    // apply transform\n    var x2 = tx + x1*s1 - y1*rz + z1*ry;\n    var y2 = ty + x1*rz + y1*s1 - z1*rx;\n    var z2 = tz - x1*ry + y1*rx + z1*s1;\n\n    var point = new Vector3d(x2, y2, z2);\n\n    return point;\n};\n\n\n/**\n * Returns a string representation of ‘this’ point, formatted as degrees, degrees+minutes, or\n * degrees+minutes+seconds.\n *\n * @param   {string} [format=dms] - Format point as 'd', 'dm', 'dms'.\n * @param   {number} [dp=0|2|4] - Number of decimal places to use - default 0 for dms, 2 for dm, 4 for d.\n * @returns {string} Comma-separated latitude/longitude.\n */\nLatLon.prototype.toString = function(format, dp) {\n    return Dms.toLat(this.lat, format, dp) + ', ' + Dms.toLon(this.lon, format, dp);\n};\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\n/** Extend Number object with method to convert numeric degrees to radians */\nif (Number.prototype.toRadians === undefined) {\n    Number.prototype.toRadians = function() { return this * Math.PI / 180; };\n}\n\n/** Extend Number object with method to convert radians to numeric (signed) degrees */\nif (Number.prototype.toDegrees === undefined) {\n    Number.prototype.toDegrees = function() { return this * 180 / Math.PI; };\n}\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\nif (typeof module != 'undefined' && module.exports) module.exports = LatLon, module.exports.Vector3d = Vector3d; // ≡ export { LatLon as default, Vector3d }\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/* Ordnance Survey Grid Reference functions                           (c) Chris Veness 2005-2016  */\n/*                                                                                   MIT Licence  */\n/* www.movable-type.co.uk/scripts/latlong-gridref.html                                            */\n/* www.movable-type.co.uk/scripts/geodesy/docs/module-osgridref.html                              */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\n'use strict';\nif (typeof module!='undefined' && module.exports) var LatLon = require('./latlon-ellipsoidal.js'); // ≡ import LatLon from 'latlon-ellipsoidal.js'\n\n\n/**\n * Convert OS grid references to/from OSGB latitude/longitude points.\n *\n * Formulation implemented here due to Thomas, Redfearn, etc is as published by OS, but is inferior\n * to Krüger as used by e.g. Karney 2011.\n *\n * www.ordnancesurvey.co.uk/docs/support/guide-coordinate-systems-great-britain.pdf.\n *\n * @module   osgridref\n * @requires latlon-ellipsoidal\n */\n/*\n * Converted 2015 to work with WGS84 by default, OSGB36 as option;\n * www.ordnancesurvey.co.uk/blog/2014/12/confirmation-on-changes-to-latitude-and-longitude\n */\n\n\n/**\n * Creates an OsGridRef object.\n *\n * @constructor\n * @param {number} easting - Easting in metres from OS false origin.\n * @param {number} northing - Northing in metres from OS false origin.\n *\n * @example\n *   var grid = new OsGridRef(651409, 313177);\n */\nfunction OsGridRef(easting, northing) {\n    // allow instantiation without 'new'\n    if (!(this instanceof OsGridRef)) return new OsGridRef(easting, northing);\n\n    this.easting = Number(easting);\n    this.northing = Number(northing);\n}\n\n\n/**\n * Converts latitude/longitude to Ordnance Survey grid reference easting/northing coordinate.\n *\n * Note formulation implemented here due to Thomas, Redfearn, etc is as published by OS, but is\n * inferior to Krüger as used by e.g. Karney 2011.\n *\n * @param   {LatLon}    point - latitude/longitude.\n * @returns {OsGridRef} OS Grid Reference easting/northing.\n *\n * @example\n *   var p = new LatLon(52.65798, 1.71605);\n *   var grid = OsGridRef.latLonToOsGrid(p); // grid.toString(): TG 51409 13177\n *   // for conversion of (historical) OSGB36 latitude/longitude point:\n *   var p = new LatLon(52.65757, 1.71791, LatLon.datum.OSGB36);\n */\nOsGridRef.latLonToOsGrid = function(point) {\n    if (!(point instanceof LatLon)) throw new TypeError('point is not LatLon object');\n\n    // if necessary convert to OSGB36 first\n    if (point.datum != LatLon.datum.OSGB36) point = point.convertDatum(LatLon.datum.OSGB36);\n\n    var φ = point.lat.toRadians();\n    var λ = point.lon.toRadians();\n\n    var a = 6377563.396, b = 6356256.909;              // Airy 1830 major & minor semi-axes\n    var F0 = 0.9996012717;                             // NatGrid scale factor on central meridian\n    var φ0 = (49).toRadians(), λ0 = (-2).toRadians();  // NatGrid true origin is 49°N,2°W\n    var N0 = -100000, E0 = 400000;                     // northing & easting of true origin, metres\n    var e2 = 1 - (b*b)/(a*a);                          // eccentricity squared\n    var n = (a-b)/(a+b), n2 = n*n, n3 = n*n*n;         // n, n², n³\n\n    var cosφ = Math.cos(φ), sinφ = Math.sin(φ);\n    var ν = a*F0/Math.sqrt(1-e2*sinφ*sinφ);            // nu = transverse radius of curvature\n    var ρ = a*F0*(1-e2)/Math.pow(1-e2*sinφ*sinφ, 1.5); // rho = meridional radius of curvature\n    var η2 = ν/ρ-1;                                    // eta = ?\n\n    var Ma = (1 + n + (5/4)*n2 + (5/4)*n3) * (φ-φ0);\n    var Mb = (3*n + 3*n*n + (21/8)*n3) * Math.sin(φ-φ0) * Math.cos(φ+φ0);\n    var Mc = ((15/8)*n2 + (15/8)*n3) * Math.sin(2*(φ-φ0)) * Math.cos(2*(φ+φ0));\n    var Md = (35/24)*n3 * Math.sin(3*(φ-φ0)) * Math.cos(3*(φ+φ0));\n    var M = b * F0 * (Ma - Mb + Mc - Md);              // meridional arc\n\n    var cos3φ = cosφ*cosφ*cosφ;\n    var cos5φ = cos3φ*cosφ*cosφ;\n    var tan2φ = Math.tan(φ)*Math.tan(φ);\n    var tan4φ = tan2φ*tan2φ;\n\n    var I = M + N0;\n    var II = (ν/2)*sinφ*cosφ;\n    var III = (ν/24)*sinφ*cos3φ*(5-tan2φ+9*η2);\n    var IIIA = (ν/720)*sinφ*cos5φ*(61-58*tan2φ+tan4φ);\n    var IV = ν*cosφ;\n    var V = (ν/6)*cos3φ*(ν/ρ-tan2φ);\n    var VI = (ν/120) * cos5φ * (5 - 18*tan2φ + tan4φ + 14*η2 - 58*tan2φ*η2);\n\n    var Δλ = λ-λ0;\n    var Δλ2 = Δλ*Δλ, Δλ3 = Δλ2*Δλ, Δλ4 = Δλ3*Δλ, Δλ5 = Δλ4*Δλ, Δλ6 = Δλ5*Δλ;\n\n    var N = I + II*Δλ2 + III*Δλ4 + IIIA*Δλ6;\n    var E = E0 + IV*Δλ + V*Δλ3 + VI*Δλ5;\n\n    N = Number(N.toFixed(3)); // round to mm precision\n    E = Number(E.toFixed(3));\n\n    return new OsGridRef(E, N); // gets truncated to SW corner of 1m grid square\n};\n\n\n/**\n * Converts Ordnance Survey grid reference easting/northing coordinate to latitude/longitude\n * (SW corner of grid square).\n *\n * Note formulation implemented here due to Thomas, Redfearn, etc is as published by OS, but is\n * inferior to Krüger as used by e.g. Karney 2011.\n *\n * @param   {OsGridRef}    gridref - Grid ref E/N to be converted to lat/long (SW corner of grid square).\n * @param   {LatLon.datum} [datum=WGS84] - Datum to convert grid reference into.\n * @returns {LatLon}       Latitude/longitude of supplied grid reference.\n *\n * @example\n *   var gridref = new OsGridRef(651409.903, 313177.270);\n *   var pWgs84 = OsGridRef.osGridToLatLon(gridref);                     // 52°39′28.723″N, 001°42′57.787″E\n *   // to obtain (historical) OSGB36 latitude/longitude point:\n *   var pOsgb = OsGridRef.osGridToLatLon(gridref, LatLon.datum.OSGB36); // 52°39′27.253″N, 001°43′04.518″E\n */\nOsGridRef.osGridToLatLon = function(gridref, datum) {\n    if (!(gridref instanceof OsGridRef)) throw new TypeError('gridref is not OsGridRef object');\n    if (datum === undefined) datum = LatLon.datum.WGS84;\n\n    var E = gridref.easting;\n    var N = gridref.northing;\n\n    var a = 6377563.396, b = 6356256.909;              // Airy 1830 major & minor semi-axes\n    var F0 = 0.9996012717;                             // NatGrid scale factor on central meridian\n    var φ0 = (49).toRadians(), λ0 = (-2).toRadians();  // NatGrid true origin is 49°N,2°W\n    var N0 = -100000, E0 = 400000;                     // northing & easting of true origin, metres\n    var e2 = 1 - (b*b)/(a*a);                          // eccentricity squared\n    var n = (a-b)/(a+b), n2 = n*n, n3 = n*n*n;         // n, n², n³\n\n    var φ=φ0, M=0;\n    do {\n        φ = (N-N0-M)/(a*F0) + φ;\n\n        var Ma = (1 + n + (5/4)*n2 + (5/4)*n3) * (φ-φ0);\n        var Mb = (3*n + 3*n*n + (21/8)*n3) * Math.sin(φ-φ0) * Math.cos(φ+φ0);\n        var Mc = ((15/8)*n2 + (15/8)*n3) * Math.sin(2*(φ-φ0)) * Math.cos(2*(φ+φ0));\n        var Md = (35/24)*n3 * Math.sin(3*(φ-φ0)) * Math.cos(3*(φ+φ0));\n        M = b * F0 * (Ma - Mb + Mc - Md);              // meridional arc\n\n    } while (N-N0-M >= 0.00001);  // ie until < 0.01mm\n\n    var cosφ = Math.cos(φ), sinφ = Math.sin(φ);\n    var ν = a*F0/Math.sqrt(1-e2*sinφ*sinφ);            // nu = transverse radius of curvature\n    var ρ = a*F0*(1-e2)/Math.pow(1-e2*sinφ*sinφ, 1.5); // rho = meridional radius of curvature\n    var η2 = ν/ρ-1;                                    // eta = ?\n\n    var tanφ = Math.tan(φ);\n    var tan2φ = tanφ*tanφ, tan4φ = tan2φ*tan2φ, tan6φ = tan4φ*tan2φ;\n    var secφ = 1/cosφ;\n    var ν3 = ν*ν*ν, ν5 = ν3*ν*ν, ν7 = ν5*ν*ν;\n    var VII = tanφ/(2*ρ*ν);\n    var VIII = tanφ/(24*ρ*ν3)*(5+3*tan2φ+η2-9*tan2φ*η2);\n    var IX = tanφ/(720*ρ*ν5)*(61+90*tan2φ+45*tan4φ);\n    var X = secφ/ν;\n    var XI = secφ/(6*ν3)*(ν/ρ+2*tan2φ);\n    var XII = secφ/(120*ν5)*(5+28*tan2φ+24*tan4φ);\n    var XIIA = secφ/(5040*ν7)*(61+662*tan2φ+1320*tan4φ+720*tan6φ);\n\n    var dE = (E-E0), dE2 = dE*dE, dE3 = dE2*dE, dE4 = dE2*dE2, dE5 = dE3*dE2, dE6 = dE4*dE2, dE7 = dE5*dE2;\n    φ = φ - VII*dE2 + VIII*dE4 - IX*dE6;\n    var λ = λ0 + X*dE - XI*dE3 + XII*dE5 - XIIA*dE7;\n\n    var point =  new LatLon(φ.toDegrees(), λ.toDegrees(), LatLon.datum.OSGB36);\n    if (datum != LatLon.datum.OSGB36) point = point.convertDatum(datum);\n\n    return point;\n};\n\n\n/**\n * Parses grid reference to OsGridRef object.\n *\n * Accepts standard grid references (eg 'SU 387 148'), with or without whitespace separators, from\n * two-digit references up to 10-digit references (1m × 1m square), or fully numeric comma-separated\n * references in metres (eg '438700,114800').\n *\n * @param   {string}    gridref - Standard format OS grid reference.\n * @returns {OsGridRef} Numeric version of grid reference in metres from false origin (SW corner of\n *   supplied grid square).\n * @throws Error on Invalid grid reference.\n *\n * @example\n *   var grid = OsGridRef.parse('TG 51409 13177'); // grid: { easting: 651409, northing: 313177 }\n */\nOsGridRef.parse = function(gridref) {\n    gridref = String(gridref).trim();\n\n    // check for fully numeric comma-separated gridref format\n    var match = gridref.match(/^(\\d+),\\s*(\\d+)$/);\n    if (match) return new OsGridRef(match[1], match[2]);\n\n    // validate format\n    match = gridref.match(/^[A-Z]{2}\\s*[0-9]+\\s*[0-9]+$/i);\n    if (!match) throw new Error('Invalid grid reference');\n\n    // get numeric values of letter references, mapping A->0, B->1, C->2, etc:\n    var l1 = gridref.toUpperCase().charCodeAt(0) - 'A'.charCodeAt(0);\n    var l2 = gridref.toUpperCase().charCodeAt(1) - 'A'.charCodeAt(0);\n    // shuffle down letters after 'I' since 'I' is not used in grid:\n    if (l1 > 7) l1--;\n    if (l2 > 7) l2--;\n\n    // convert grid letters into 100km-square indexes from false origin (grid square SV):\n    var e100km = ((l1-2)%5)*5 + (l2%5);\n    var n100km = (19-Math.floor(l1/5)*5) - Math.floor(l2/5);\n\n    // skip grid letters to get numeric (easting/northing) part of ref\n    var en = gridref.slice(2).trim().split(/\\s+/);\n    // if e/n not whitespace separated, split half way\n    if (en.length == 1) en = [ en[0].slice(0, en[0].length/2), en[0].slice(en[0].length/2) ];\n\n    // validation\n    if (e100km<0 || e100km>6 || n100km<0 || n100km>12) throw new Error('Invalid grid reference');\n    if (en.length != 2) throw new Error('Invalid grid reference');\n    if (en[0].length != en[1].length) throw new Error('Invalid grid reference');\n\n    // standardise to 10-digit refs (metres)\n    en[0] = (en[0]+'00000').slice(0, 5);\n    en[1] = (en[1]+'00000').slice(0, 5);\n\n    var e = e100km + en[0];\n    var n = n100km + en[1];\n\n    return new OsGridRef(e, n);\n};\n\n\n/**\n * Converts ‘this’ numeric grid reference to standard OS grid reference.\n *\n * @param   {number} [digits=10] - Precision of returned grid reference (10 digits = metres).\n * @returns {string} This grid reference in standard format.\n */\nOsGridRef.prototype.toString = function(digits) {\n    digits = (digits === undefined) ? 10 : Number(digits);\n    if (isNaN(digits)) throw new Error('Invalid precision');\n\n    var e = this.easting;\n    var n = this.northing;\n    if (isNaN(e) || isNaN(n)) throw new Error('Invalid grid reference');\n\n    // use digits = 0 to return numeric format (in metres)\n    if (digits == 0) return e.pad(6)+','+n.pad(6);\n\n    // get the 100km-grid indices\n    var e100k = Math.floor(e/100000), n100k = Math.floor(n/100000);\n\n    if (e100k<0 || e100k>6 || n100k<0 || n100k>12) return '';\n\n    // translate those into numeric equivalents of the grid letters\n    var l1 = (19-n100k) - (19-n100k)%5 + Math.floor((e100k+10)/5);\n    var l2 = (19-n100k)*5%25 + e100k%5;\n\n    // compensate for skipped 'I' and build grid letter-pairs\n    if (l1 > 7) l1++;\n    if (l2 > 7) l2++;\n    var letPair = String.fromCharCode(l1+'A'.charCodeAt(0), l2+'A'.charCodeAt(0));\n\n    // strip 100km-grid indices from easting & northing, and reduce precision\n    e = Math.floor((e%100000)/Math.pow(10, 5-digits/2));\n    n = Math.floor((n%100000)/Math.pow(10, 5-digits/2));\n\n    var gridRef = letPair + ' ' + e.pad(digits/2) + ' ' + n.pad(digits/2);\n\n    return gridRef;\n};\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\n/** Polyfill String.trim for old browsers\n *  (q.v. blog.stevenlevithan.com/archives/faster-trim-javascript) */\nif (String.prototype.trim === undefined) {\n    String.prototype.trim = function() {\n        return String(this).replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n    };\n}\n\n/** Extend Number object with method to pad with leading zeros to make it w chars wide\n *  (q.v. stackoverflow.com/questions/2998784 */\nif (Number.prototype.pad === undefined) {\n    Number.prototype.pad = function(w) {\n        var n = this.toString();\n        while (n.length < w) n = '0' + n;\n        return n;\n    };\n}\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\nif (typeof module != 'undefined' && module.exports) module.exports = OsGridRef; // ≡ export default OsGridRef\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/* Vector handling functions                                          (c) Chris Veness 2011-2016  */\n/*                                                                                   MIT Licence  */\n/* www.movable-type.co.uk/scripts/geodesy/docs/module-vector3d.html                               */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\n'use strict';\n\n\n/**\n * Library of 3-d vector manipulation routines.\n *\n * In a geodesy context, these vectors may be used to represent:\n *  - n-vector representing a normal to point on Earth's surface\n *  - earth-centered, earth fixed vector (≡ Gade’s ‘p-vector’)\n *  - great circle normal to vector (on spherical earth model)\n *  - motion vector on Earth's surface\n *  - etc\n *\n * Functions return vectors as return results, so that operations can be chained.\n * @example var v = v1.cross(v2).dot(v3) // ≡ v1×v2⋅v3\n *\n * @module vector3d\n */\n\n\n/**\n * Creates a 3-d vector.\n *\n * The vector may be normalised, or use x/y/z values for eg height relative to the sphere or\n * ellipsoid, distance from earth centre, etc.\n *\n * @constructor\n * @param {number} x - X component of vector.\n * @param {number} y - Y component of vector.\n * @param {number} z - Z component of vector.\n */\nfunction Vector3d(x, y, z) {\n    // allow instantiation without 'new'\n    if (!(this instanceof Vector3d)) return new Vector3d(x, y, z);\n\n    this.x = Number(x);\n    this.y = Number(y);\n    this.z = Number(z);\n}\n\n\n/**\n * Adds supplied vector to ‘this’ vector.\n *\n * @param   {Vector3d} v - Vector to be added to this vector.\n * @returns {Vector3d} Vector representing sum of this and v.\n */\nVector3d.prototype.plus = function(v) {\n    if (!(v instanceof Vector3d)) throw new TypeError('v is not Vector3d object');\n\n    return new Vector3d(this.x + v.x, this.y + v.y, this.z + v.z);\n};\n\n\n/**\n * Subtracts supplied vector from ‘this’ vector.\n *\n * @param   {Vector3d} v - Vector to be subtracted from this vector.\n * @returns {Vector3d} Vector representing difference between this and v.\n */\nVector3d.prototype.minus = function(v) {\n    if (!(v instanceof Vector3d)) throw new TypeError('v is not Vector3d object');\n\n    return new Vector3d(this.x - v.x, this.y - v.y, this.z - v.z);\n};\n\n\n/**\n * Multiplies ‘this’ vector by a scalar value.\n *\n * @param   {number}   x - Factor to multiply this vector by.\n * @returns {Vector3d} Vector scaled by x.\n */\nVector3d.prototype.times = function(x) {\n    x = Number(x);\n\n    return new Vector3d(this.x * x, this.y * x, this.z * x);\n};\n\n\n/**\n * Divides ‘this’ vector by a scalar value.\n *\n * @param   {number}   x - Factor to divide this vector by.\n * @returns {Vector3d} Vector divided by x.\n */\nVector3d.prototype.dividedBy = function(x) {\n    x = Number(x);\n\n    return new Vector3d(this.x / x, this.y / x, this.z / x);\n};\n\n\n/**\n * Multiplies ‘this’ vector by the supplied vector using dot (scalar) product.\n *\n * @param   {Vector3d} v - Vector to be dotted with this vector.\n * @returns {number} Dot product of ‘this’ and v.\n */\nVector3d.prototype.dot = function(v) {\n    if (!(v instanceof Vector3d)) throw new TypeError('v is not Vector3d object');\n\n    return this.x*v.x + this.y*v.y + this.z*v.z;\n};\n\n\n/**\n * Multiplies ‘this’ vector by the supplied vector using cross (vector) product.\n *\n * @param   {Vector3d} v - Vector to be crossed with this vector.\n * @returns {Vector3d} Cross product of ‘this’ and v.\n */\nVector3d.prototype.cross = function(v) {\n    if (!(v instanceof Vector3d)) throw new TypeError('v is not Vector3d object');\n\n    var x = this.y*v.z - this.z*v.y;\n    var y = this.z*v.x - this.x*v.z;\n    var z = this.x*v.y - this.y*v.x;\n\n    return new Vector3d(x, y, z);\n};\n\n\n/**\n * Negates a vector to point in the opposite direction\n *\n * @returns {Vector3d} Negated vector.\n */\nVector3d.prototype.negate = function() {\n    return new Vector3d(-this.x, -this.y, -this.z);\n};\n\n\n/**\n * Length (magnitude or norm) of ‘this’ vector\n *\n * @returns {number} Magnitude of this vector.\n */\nVector3d.prototype.length = function() {\n    return Math.sqrt(this.x*this.x + this.y*this.y + this.z*this.z);\n};\n\n\n/**\n * Normalizes a vector to its unit vector\n * – if the vector is already unit or is zero magnitude, this is a no-op.\n *\n * @returns {Vector3d} Normalised version of this vector.\n */\nVector3d.prototype.unit = function() {\n    var norm = this.length();\n    if (norm == 1) return this;\n    if (norm == 0) return this;\n\n    var x = this.x/norm;\n    var y = this.y/norm;\n    var z = this.z/norm;\n\n    return new Vector3d(x, y, z);\n};\n\n\n/**\n * Calculates the angle between ‘this’ vector and supplied vector.\n *\n * @param   {Vector3d} v\n * @param   {Vector3d} [vSign] - If supplied (and out of plane of this and v), angle is signed +ve if\n *     this->v is clockwise looking along vSign, -ve in opposite direction (otherwise unsigned angle).\n * @returns {number} Angle (in radians) between this vector and supplied vector.\n */\nVector3d.prototype.angleTo = function(v, vSign) {\n    if (!(v instanceof Vector3d)) throw new TypeError('v is not Vector3d object');\n\n    var sinθ = this.cross(v).length();\n    var cosθ = this.dot(v);\n\n    if (vSign !== undefined) {\n        if (!(vSign instanceof Vector3d)) throw new TypeError('vSign is not Vector3d object');\n        // use vSign as reference to get sign of sinθ\n        sinθ = this.cross(v).dot(vSign)<0 ? -sinθ : sinθ;\n    }\n\n    return Math.atan2(sinθ, cosθ);\n};\n\n\n/**\n * Rotates ‘this’ point around an axis by a specified angle.\n *\n * @param   {Vector3d} axis - The axis being rotated around.\n * @param   {number}   theta - The angle of rotation (in radians).\n * @returns {Vector3d} The rotated point.\n */\nVector3d.prototype.rotateAround = function(axis, theta) {\n    if (!(axis instanceof Vector3d)) throw new TypeError('axis is not Vector3d object');\n\n    // en.wikipedia.org/wiki/Rotation_matrix#Rotation_matrix_from_axis_and_angle\n    // en.wikipedia.org/wiki/Quaternions_and_spatial_rotation#Quaternion-derived_rotation_matrix\n    var p1 = this.unit();\n    var p = [ p1.x, p1.y, p1.z ]; // the point being rotated\n    var a = axis.unit();          // the axis being rotated around\n    var s = Math.sin(theta);\n    var c = Math.cos(theta);\n    // quaternion-derived rotation matrix\n    var q = [\n        [ a.x*a.x*(1-c) + c,     a.x*a.y*(1-c) - a.z*s, a.x*a.z*(1-c) + a.y*s],\n        [ a.y*a.x*(1-c) + a.z*s, a.y*a.y*(1-c) + c,     a.y*a.z*(1-c) - a.x*s],\n        [ a.z*a.x*(1-c) - a.y*s, a.z*a.y*(1-c) + a.x*s, a.z*a.z*(1-c) + c    ],\n    ];\n    // multiply q × p\n    var qp = [0, 0, 0];\n    for (var i=0; i<3; i++) {\n        for (var j=0; j<3; j++) {\n            qp[i] += q[i][j] * p[j];\n        }\n    }\n    var p2 = new Vector3d(qp[0], qp[1], qp[2]);\n    return p2;\n    // qv en.wikipedia.org/wiki/Rodrigues'_rotation_formula...\n};\n\n\n/**\n * String representation of vector.\n *\n * @param   {number} [precision=3] - Number of decimal places to be used.\n * @returns {string} Vector represented as [x,y,z].\n */\nVector3d.prototype.toString = function(precision) {\n    var p = (precision === undefined) ? 3 : Number(precision);\n\n    var str = '[' + this.x.toFixed(p) + ',' + this.y.toFixed(p) + ',' + this.z.toFixed(p) + ']';\n\n    return str;\n};\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\nif (typeof module != 'undefined' && module.exports) module.exports = Vector3d; // ≡ export default Vector3d\n"],"sourceRoot":"/source/"}